TCP协议：
面向连接、可靠传输、面向字节流

怎么可靠传输的：
1. 首先面向连接，三次握手、四次挥手确认双方的收发能力
2. 是通过确认应答机制，就是接收端每次收到数据都会有一个ACK回复
	 还有超时重传机制，如果发送端在一个特定时间间隔内没有收到接收端发来的确认应答, 就会进行重发
	 还有TCP头部有32位的序号和确认序号，确保接收数据的顺序一致
	 还有16位校验和，确保接收数据的一致性
3. 为了实现可靠传输，也损失了一些性能，为了提高性能又有
	滑动窗口机制，流量控制机制，如果发送端每次都要等接收端确认回复之后，发送端才能发送下一条数据效率会很低，所以双方会设置一个窗口大小，窗口大小指的是无需等待确认应答而可以继续发送数据的最大值，保证发送端可以连续发送，如果发送太快导致接收缓冲区打满，这个时候再发送就可能丢包，所以通过每次接收端接收到数据会回复一个还剩的窗口大小，进行流量控制
	又有快速重传机制，接收端按顺序回复确认序号，如果中间有丢包，会连发三次重传请求，客户端连续收到三次就会重传，三次是为了避免网络延迟而重传
	又有拥塞控制，如果在刚开始阶段就发送大量的数据, 仍然可能引发问题，所以TCP引入慢启动机制， 探探路, 摸清当前的网络拥堵状态, 再决定按照多大的速度传输数据;
	还有延迟应答机制，延迟应答机制是接收端不立即回复，等待接收端很快的把数据处理了，保证窗口的大小
	和捎带应答机制，就是确认回复和要发送的数据一起发送出去
4. 面向字节流，延迟发送，如果发送的数据很小，这样就可以等待再来数据凑成MSS最大数据段，一起发送出去，



epoll和select理解：
首先select是一个系统调用接口，用户创建三个描述符集合（读、写、异常），即位图，将要监控的描述符加入位图，然后内核轮询遍历位图，然后
保留就绪的描述符，将没有就绪的描述符移除，最后得到的位图返还给用户态，然后用户轮询遍历位图，处理就绪的描述符，然后重新添加描述符
epoll使用三个系统调用接口，首先创建epoll对象，返回一个描述符，创建了一个eventpoll结构体，关键的有红黑树和双向链表，然后使用epoll_c
tl函数添加监控的描述符，这里是创建事件结构体epoll_events，将事件结构挂到红黑树，如果红黑树上的描述符有就绪的了，那么就将就绪的描述
符加到双向链表，然后调用epoll_wait,只要查看链表是否有就绪的描述符即可，将就绪的事件结构返回